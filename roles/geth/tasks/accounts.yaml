---
- name: Create accounts
  args:
    executable: /bin/bash
  shell: |
    if [[ -z "$KEYSTORE_NAME" ]]; then
      echo "KEYSTORE_NAME is not set" >&2 && exit 1
    fi

    [[ -d $DATADIR ]] || mkdir -p $DATADIR

    if [[ -z "$PASSWORD" ]] && [[ -z "$(cat $DATADIR/password.txt || echo "")" ]]; then
      echo "$(openssl rand -hex 12)" > $DATADIR/password.txt
    else
      echo "$PASSWORD" > $DATADIR/password.txt
    fi

    if [[ ! -f "$DATADIR/keystore/${KEYSTORE_NAME}.json" ]]; then
      geth --datadir $DATADIR account new --password $DATADIR/password.txt && \
        mv $DATADIR/keystore/UTC* $DATADIR/keystore/${KEYSTORE_NAME}.json
    fi
  register: accounts
  loop: "{{ geth_accounts }}"
  when: item.create and item.node == inventory_hostname
  environment:
    NODE_NAME: "{{inventory_hostname}}"
    DATADIR: "{{datadir}}"
    PASSWORD: "{{item.password}}"
    ADDRESS: "{{item.address}}"
    KEYSTORE_NAME: "{{item.name}}"

- name: Handle accounts secret file
  args:
    executable: /bin/bash
  shell: |
    if [[ -z "$KEYSTORE_NAME" ]]; then
      echo "KEYSTORE_NAME is not set" >&2 && exit 1
    fi

    if [[ -z "$PASSWORD" ]]; then
      echo "PASSWORD is not set" >&2 && exit 1
    fi

    if [[ -z "$CONTENT" ]]; then
      echo "CONTENT is not set" >&2 && exit 1
    fi

    if ! $(echo "$CONTENT" | jq -e . > /dev/null); then
      echo "CONTENT is not a valid JSON" >&2 && exit 1
    fi

    ADDRESS=$(echo "$CONTENT" | jq -r '.address //""')
    if [[ -z "$ADDRESS" ]]; then
      echo "Invalid Secret File Content: Unable to detech address" >&2 && exit 1
    fi

    [[ -d $DATADIR/keystore ]] || mkdir -p $DATADIR/keystore
    echo "$CONTENT" > "$DATADIR/keystore/${KEYSTORE_NAME}.json"
  loop: "{{ geth_accounts }}"
  when: >
    item.secret_file is defined and
    item.node == inventory_hostname and
    not item.create and
    item.secret_file.name != "" and
    item.secret_file.content != ""
  environment:
    NODE_NAME: "{{inventory_hostname}}"
    DATADIR: "{{datadir}}"
    KEYSTORE_NAME: "{{ item.name }}"
    PASSWORD: "{{item.password}}"
    CONTENT: "{{ item.secret_file.content }}"

- name: Build final accounts
  args:
    executable: /bin/bash
  register: final_accounts
  # This step will echo the account (item) in JSON format to the stdout
  shell: |
    KEYSTORE_FILE="$DATADIR/keystore/${KEYSTORE_NAME}.json"
    if [[ ! -f $KEYSTORE_FILE ]]; then
      echo "Keystore $KEYSTORE_FILE not found" >&2 && exit 1
    fi
    ADDRESS=$(jq -r '.address' $KEYSTORE_FILE)

    ACCOUNT=$(cat <<EOF
    {"address": "$ADDRESS", "balance": "{{item.balance|default(0)}}"}
    EOF
    )
    echo "$ACCOUNT"
  when: item.node == inventory_hostname
  loop: "{{ geth_accounts }}"
  environment:
    DATADIR: "{{datadir}}"
    KEYSTORE_NAME: "{{item.name}}"

- name: Set temporary fact
  set_fact:
    _geth_accounts_final: "{{ final_accounts.results | selectattr('stdout', 'defined') | map(attribute='stdout') | map('from_json') | list }}"

- name: Final accounts
  set_fact:
    geth_accounts_final: "{{ ansible_play_hosts | map('extract', hostvars, '_geth_accounts_final') | flatten | list }}"
  run_once: true
