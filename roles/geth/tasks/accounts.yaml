---
- name: Create accounts
  args:
    executable: /bin/bash
  shell: |
    if [[ -z "$KEYSTORE_NAME" ]]; then
      echo "KEYSTORE_NAME is not set" >&2 && exit 1
    fi

    [[ -d $DATADIR ]] || mkdir -p $DATADIR

    if [[ -z "$PASSWORD" ]] && [[ -z "$(cat "$PASSWORD_FILE" || echo "")" ]]; then
      echo "$(openssl rand -hex 12)" > $PASSWORD_FILE
    fi

    if [[ -n "$PASSWORD" ]]; then
      echo "$PASSWORD" > $PASSWORD_FILE
    fi

    if [[ ! -f "$DATADIR/keystore/${KEYSTORE_NAME}.json" ]]; then
      geth --datadir $DATADIR account new --password $PASSWORD_FILE && \
        mv $DATADIR/keystore/UTC* $DATADIR/keystore/${KEYSTORE_NAME}.json
    fi
  register: accounts
  loop: "{{geth_accounts}}"
  when: item.create and item.node == inventory_hostname
  environment:
    NODE_NAME: "{{inventory_hostname}}"
    DATADIR: "{{datadir}}"
    PASSWORD: "{{item.password}}"
    ADDRESS: "{{item.address}}"
    KEYSTORE_NAME: "{{item.name}}"
    PASSWORD_FILE: "{{datadir}}/{{item.name}}_password.txt"

- name: Handle accounts secret file
  args:
    executable: /bin/bash
  shell: |
    if [[ -z "$KEYSTORE_NAME" ]]; then
      echo "KEYSTORE_NAME is not set" >&2 && exit 1
    fi

    if [[ -z "$PASSWORD" ]]; then
      echo "PASSWORD is not set" >&2 && exit 1
    fi

    if [[ -z "$CONTENT" ]]; then
      echo "CONTENT is not set" >&2 && exit 1
    fi

    if ! $(echo "$CONTENT" | jq -e . > /dev/null); then
      echo "CONTENT is not a valid JSON" >&2 && exit 1
    fi

    ADDRESS=$(echo "$CONTENT" | jq -r '.address //""')
    if [[ -z "$ADDRESS" ]]; then
      echo "Invalid Secret File Content: Unable to detech address" >&2 && exit 1
    fi

    [[ -d $DATADIR/keystore ]] || mkdir -p $DATADIR/keystore
    echo "$CONTENT" > "$DATADIR/keystore/${KEYSTORE_NAME}.json"
  loop: "{{geth_accounts}}"
  when: >
    item.secret_file is defined and
    item.node == inventory_hostname and
    not item.create and
    item.secret_file.name != "" and
    item.secret_file.content != ""
  environment:
    NODE_NAME: "{{inventory_hostname}}"
    DATADIR: "{{datadir}}"
    KEYSTORE_NAME: "{{item.name}}"
    PASSWORD: "{{item.password}}"
    CONTENT: "{{item.secret_file.content}}"

- name: Build final accounts
  args:
    executable: /bin/bash
  register: final_accounts
  # This step will echo the account (item) in JSON format to the stdout
  shell: |
    KEYSTORE_FILE="$DATADIR/keystore/${KEYSTORE_NAME}.json"
    if [[ ! -f $KEYSTORE_FILE ]]; then
      echo "Keystore $KEYSTORE_FILE not found" >&2 && exit 1
    fi
    ADDRESS=$(jq -r '.address' $KEYSTORE_FILE)

    ACCOUNT=$(cat <<EOF
    {
      "address": "$ADDRESS",
      "balance": "{{item.balance|default(0)}}",
      "miner": $MINER,
      "name": "$KEYSTORE_NAME",
      "node": "$NODE_NAME"
    }
    EOF
    )
    echo "$ACCOUNT"
  when: item.node == inventory_hostname
  loop: "{{geth_accounts}}"
  environment:
    NODE_NAME: "{{inventory_hostname}}"
    DATADIR: "{{datadir}}"
    KEYSTORE_NAME: "{{item.name}}"
    MINER: "{{item.miner|default(false)|lower}}"

- name: Set temporary fact
  set_fact:
    _geth_accounts_final: "{{final_accounts.results | selectattr('stdout', 'defined') | map(attribute='stdout') | map('from_json') | list}}"

- name: Set get_final_accounts
  set_fact:
    geth_accounts_final: "{{ansible_play_hosts | map('extract', hostvars, '_geth_accounts_final') | flatten | list}}"
  run_once: true

- name: Set extradata
  set_fact:
    extradata: "{{'0x0000000000000000000000000000000000000000000000000000000000000000%s0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'| format(geth_accounts_final | selectattr('miner', 'defined') | selectattr('miner', 'equalto', true) | map(attribute='address') | join(''))}}"
  run_once: true
